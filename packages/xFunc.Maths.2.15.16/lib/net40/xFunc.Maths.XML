<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xFunc.Maths</name>
    </assembly>
    <members>
        <member name="T:xFunc.Maths.Expressions.Ceil">
            <summary>
            Represents the "ceil" function.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.UnaryExpression">
            <summary>
            The abstract base class that represents the unary operation.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.IExpression">
            <summary>
            Defines methods to calculate mathematical expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.IExpression.Calculate">
            <summary>
            Calculates this mathemarical expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>A result of the calculation.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.IExpression.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>A result of the calculation.</returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.IExpression.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.IExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.IExpression.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.IExpression.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.IExpression.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.IExpression.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:xFunc.Maths.Expressions.UnaryExpression.parent">
            <summary>
            The parent expression of this expression.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.UnaryExpression.argument">
            <summary>
            The (first) operand.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UnaryExpression"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UnaryExpression"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.GetHashCode(System.Int32)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="first">The first.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.Calculate">
            <summary>
            Calculates this mathemarical expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.Argument">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix. Default implementation returns <c>false</c>. Override it if this expression returns a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ceil.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Ceil"/> class.
            </summary>
            <param name="argument">The expression that represents a double-precision floating-point number to be rounded up.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ceil.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ceil.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ceil.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ceil.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.DelegateExpression">
            <summary>
            Represents a function in code.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.DelegateExpression.parent">
            <summary>
            The parent expression of this expression.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.#ctor(System.Func{xFunc.Maths.Expressions.ExpressionParameters,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.DelegateExpression"/> class.
            </summary>
            <param name="func">The delegate of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.Calculate">
            <summary>
            Calculates this mathemarical expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:xFunc.Maths.Expressions.DelegateExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.DelegateExpression.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DelegateExpression.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DelegateExpression.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DelegateExpression.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.DifferentParametersExpression">
            <summary>
            The base class for expressions with different number of parameters.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.DifferentParametersExpression.parent">
            <summary>
            The parent expression of this expression.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.DifferentParametersExpression.arguments">
            <summary>
            The arguments.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.DifferentParametersExpression.countOfParams">
            <summary>
            The count of parameters.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.DifferentParametersExpression"/> class.
            </summary>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.DifferentParametersExpression"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.GetHashCode(System.Int32,System.Int32)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="function">The function.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.Calculate">
            <summary>
            Calculates this mathemarical expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.CloneArguments">
            <summary>
            Closes the arguments.
            </summary>
            <returns>The new array of <see cref="T:xFunc.Maths.Expressions.IExpression"/>.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.CountOfParams">
            <summary>
            Gets or Sets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix. Default implementation returns <c>false</c>. Override it if this expression returns a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.ExpressionParameters">
            <summary>
            Combines all parameters of expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.AngleMeasurement)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="angleMeasuremnt">The angle measuremnt.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.Collections.ParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="parameters">The collection of variables' values.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.Collections.FunctionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="functions">The collection of user functions.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.AngleMeasurement,xFunc.Maths.Expressions.Collections.ParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="angleMeasuremnt">The angle measuremnt.</param>
            <param name="parameters">The collection of variables' values.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.AngleMeasurement,xFunc.Maths.Expressions.Collections.FunctionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="angleMeasuremnt">The angle measuremnt.</param>
            <param name="functions">The collection of user functions.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.Collections.ParameterCollection,xFunc.Maths.Expressions.Collections.FunctionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="parameters">The collection of variables' values.</param>
            <param name="functions">The collection of user functions.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.AngleMeasurement,xFunc.Maths.Expressions.Collections.ParameterCollection,xFunc.Maths.Expressions.Collections.FunctionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="angleMeasuremnt">The angle measuremnt.</param>
            <param name="parameters">The collection of variables' values.</param>
            <param name="functions">The collection of user functions.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.op_Implicit(xFunc.Maths.Expressions.AngleMeasurement)~xFunc.Maths.Expressions.ExpressionParameters">
            <summary>
            Creates a <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> from the specified <see cref="P:xFunc.Maths.Expressions.ExpressionParameters.AngleMeasurement"/>.
            </summary>
            <param name="angleMeasurement">The angle measurement.</param>
            <returns>The created <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.op_Implicit(xFunc.Maths.Expressions.Collections.ParameterCollection)~xFunc.Maths.Expressions.ExpressionParameters">
            <summary>
            Creates a <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> from the specified <see cref="T:xFunc.Maths.Expressions.Collections.ParameterCollection"/>.
            </summary>
            <param name="parameters">The collection of variables' values.</param>
            <returns>The created <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.op_Implicit(xFunc.Maths.Expressions.Collections.FunctionCollection)~xFunc.Maths.Expressions.ExpressionParameters">
            <summary>
            Creates a <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> from the specified <see cref="T:xFunc.Maths.Expressions.Collections.FunctionCollection"/>.
            </summary>
            <param name="functions">The collection of user functions.</param>
            <returns>The created <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.ExpressionParameters.AngleMeasurement">
            <summary>
            Gets or sets the angle measurement.
            </summary>
            <value>
            The angle measurement.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.ExpressionParameters.Parameters">
            <summary>
            Gets the collection of variables' values.
            </summary>
            <value>
            The collection of variables' values.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.ExpressionParameters.Functions">
            <summary>
            Gets the collection of user functions.
            </summary>
            <value>
            The collection of user functions.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Fact">
            <summary>
            Represents the Factorial function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Fact.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Fact"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Fact.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Fact.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Fact.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Fact.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Floor">
            <summary>
            Represents the "floor" function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Floor.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Floor"/> class.
            </summary>
            <param name="argument">The expression that represents a double-precision floating-point number to be rounded down.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Floor.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Floor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Floor.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Floor.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.GCD">
            <summary>
            Represents a greatest common divisor.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.GCD"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.GCD"/> class.
            </summary>
            <param name="firstMathExpression">The first operand.</param>
            <param name="secondMathExpression">The second operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.GCD"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.GCD"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.GCD.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.GCD.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression">
            <summary>
            The base class for hyperbolic functions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="T:xFunc.Maths.Expressions.LCM">
            <summary>
            Represents a least common multiple.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LCM"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LCM"/> class.
            </summary>
            <param name="firstMathExpression">The first operand.</param>
            <param name="secondMathExpression">The second operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.LCM"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.LCM"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LCM.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LCM.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Collections.FunctionCollection">
            <summary>
            Strongly typed dictionaty that contains user-defined functions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.FunctionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.FunctionCollection"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.FunctionCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.FunctionCollection"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.FunctionCollection.GetKeyByKey(xFunc.Maths.Expressions.UserFunction)">
            <summary>
            Gets an user function.
            </summary>
            <param name="function">The function.</param>
            <returns>An user function</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The exception that is thrown when the key specified for accessing an element in a collection does not match any key in the collection.</exception>
        </member>
        <member name="T:xFunc.Maths.Expressions.Collections.Parameter">
            <summary>
            Item of <see cref="T:xFunc.Maths.Expressions.Collections.ParameterCollection"/>.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.Parameter"/> class.
            </summary>
            <param name="key">The name of parameter.</param>
            <param name="value">The value of parameter.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.#ctor(System.String,System.Double,xFunc.Maths.Expressions.Collections.ParameterType)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.Parameter"/> class.
            </summary>
            <param name="key">The name of parameter.</param>
            <param name="value">The value of parameter.</param>
            <param name="type">The type of parameter.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.CreateConstant(System.String,System.Double)">
            <summary>
            Creates a constant.
            </summary>
            <param name="key">The name of parameter.</param>
            <param name="value">The value of parameter.</param>
            <returns>A constant.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.Parameter.Key">
            <summary>
            Gets the name of parameter.
            </summary>
            <value>
            The name of parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.Parameter.Value">
            <summary>
            Gets or sets the value of parameter.
            </summary>
            <value>
            The value of parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.Parameter.Type">
            <summary>
            Gets or sets the type of parameter.
            </summary>
            <value>
            The type of parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Collections.ParameterCollection">
            <summary>
            Strongly typed dictionaty that contains value of variables.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterCollection"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.#ctor(System.Collections.Generic.IEnumerable{xFunc.Maths.Expressions.Collections.Parameter})">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterCollection"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Add(xFunc.Maths.Expressions.Collections.Parameter)">
            <summary>
            Adds the specified element to a set.
            </summary>
            <param name="param">The element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="param"/> is null.</exception>
            <exception cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException">The variable is read only.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Add(System.String)">
            <summary>
            Adds the specified element to a set.
            </summary>
            <param name="key">The name of variable.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Add(System.String,System.Double)">
            <summary>
            Adds the specified element to a set.
            </summary>
            <param name="key">The name of variable.</param>
            <param name="value">The value of variable.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Remove(xFunc.Maths.Expressions.Collections.Parameter)">
            <summary>
            Removes the specified element from this object.
            </summary>
            <param name="param">The element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="param"/> is null.</exception>
            <exception cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException">The variable is read only.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Remove(System.String)">
            <summary>
            Removes the specified element from this object.
            </summary>
            <param name="key">The name of variable.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException">The variable is read only.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Contains(xFunc.Maths.Expressions.Collections.Parameter)">
            <summary>
            Determines whether an onject contains the specified element.
            </summary>
            <param name="param">The element.</param>
            <returns><c>true</c> if the object contains the specified element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.ContainsInConstants(xFunc.Maths.Expressions.Collections.Parameter)">
            <summary>
            Determines whether an onject contains the specified element.
            </summary>
            <param name="param">The element.</param>
            <returns><c>true</c> if the object contains the specified element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.ContainsKey(System.String)">
            <summary>
            Determines whether an onject contains the specified key.
            </summary>
            <param name="key">The name of variable.</param>
            <returns><c>true</c> if the object contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.ContainsKeyInConstants(System.String)">
            <summary>
            Determines whether an onject contains the specified key.
            </summary>
            <param name="key">The name of variable.</param>
            <returns><c>true</c> if the object contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.ParameterCollection.Item(System.String)">
            <summary>
            Gets or sets the value of variable.
            </summary>
            <value>
            The <see cref="T:System.Double"/>.
            </value>
            <param name="key">The name of variable.</param>
            <returns>The value of variable.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.ParameterCollection.Constants">
            <summary>
            Gets the constants.
            </summary>
            <value>
            The constants.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.ParameterCollection.Collection">
            <summary>
            Gets the collection of variables.
            </summary>
            <value>
            The collection.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException">
            <summary>
            Trying to change a read-only variable.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:xFunc.Maths.Expressions.Collections.ParameterType">
            <summary>
            Contains types of parameter.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.Collections.ParameterType.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.Collections.ParameterType.ReadOnly">
            <summary>
            Read only.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.Collections.ParameterType.Constant">
            <summary>
            Constant.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.Determinant">
            <summary>
            Represents a determinant.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Determinant"/> class.
            </summary>
            <param name="argument">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Determinant.Argument">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>
            The expression.
            </value>
            <exception cref="T:System.NotSupportedException">Argument is not <see cref="T:xFunc.Maths.Expressions.Matrices.Matrix"/>.</exception>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Determinant.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.Inverse">
            <summary>
            Represents the Inverse function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Inverse"/> class.
            </summary>
            <param name="argument">A matrix.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Inverse.Argument">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>
            The expression.
            </value>
            <exception cref="T:System.NotSupportedException">Argument is not <see cref="T:xFunc.Maths.Expressions.Matrices.Matrix"/>.</exception>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Inverse.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.Matrix">
            <summary>
            Represents a matrix.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.#ctor(xFunc.Maths.Expressions.Matrices.Vector[])">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Matrix"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Matrix"/> class.
            </summary>
            <param name="matrixSize">The size of the matrix.</param>
            <param name="vectorSize">The size of the vector.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.SwapRows(System.Int32,System.Int32)">
            <summary>
            Swaps the rows of matrix.
            </summary>
            <param name="firstIndex">The index of first row.</param>
            <param name="secondIndex">The index of second row.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="firstIndex"/> or <paramref name="secondIndex"/> is out of range.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Swaps the columns of matrix.
            </summary>
            <param name="firstIndex">The index of first column.</param>
            <param name="secondIndex">The index of second column.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="firstIndex"/> or <paramref name="secondIndex"/> is out of range.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.CreateIdentity(System.Int32)">
            <summary>
            Creates an identity matrix.
            </summary>
            <param name="sizeOfMatrix">The size of matrix.</param>
            <returns>An identity matrix.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The element of matrix.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:xFunc.Maths.Expressions.IExpression"/> with the specified index.
            </summary>
            <value>
            The <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </value>
            <param name="row">The row.</param>
            <param name="col">The column.</param>
            <returns>The element of matrix.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.SizeOfVectors">
            <summary>
            Gets the size of vectors.
            </summary>
            <value>
            The size of vectors.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.IsSquare">
            <summary>
            Gets a value indicating whether matrix is square.
            </summary>
            <value>
              <c>true</c> if matrix is square; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.MatrixExtentions">
            <summary>
            Provides extention methods for matrices and vectors.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Add(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Adds the <paramref name="right"/> vector to the <paramref name="left"/> vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The sum of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Add(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Adds the <paramref name="right"/> vector to the <paramref name="left"/> vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The sum of matrices.</returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Sub(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Subtracts the <paramref name="right"/> vector from the <paramref name="left"/> vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The difference of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Sub(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Subtracts the <paramref name="right"/> vector from the <paramref name="left"/> vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The difference of matrices.</returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Multiplies <paramref name="vector"/> by <paramref name="number"/>.
            </summary>
            <param name="vector">The vector.</param>
            <param name="number">The number.</param>
            <returns>The product of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Multiplies <paramref name="vector"/> by <paramref name="number"/>.
            </summary>
            <param name="vector">The vector.</param>
            <param name="number">The number.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The product of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Add(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Adds the <paramref name="right"/> matrix to the <paramref name="left"/> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <returns>The sum of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Add(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Adds the <paramref name="right"/> matrix to the <paramref name="left"/> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The sum of matrices.</returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Sub(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Subtracts the <paramref name="right"/> matrix from the <paramref name="left"/> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <returns>The difference of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Sub(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Subtracts the <paramref name="right"/> matrix from the <paramref name="left"/> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The difference of matrices.</returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Multiplies <paramref name="matrix"/> by <paramref name="number"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="number">The number.</param>
            <returns>The product of matrix and number.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Multiplies <paramref name="matrix"/> by <paramref name="number"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="number">The number.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The product of matrix and number.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Multiplies the <paramref name="left" /> matrix by the <paramref name="right" /> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <returns>
            The product of matrices.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Multiplies the <paramref name="left"/> matrix by the <paramref name="right"/> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            The product of matrices.
            </returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Multiplies the <paramref name="left" /> vector by the <paramref name="right" /> matrix.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right matrix.</param>
            <returns>
            The product of matrices.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Multiplies the <paramref name="left"/> vector by the <paramref name="right"/> matrix.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            The product of matrices.
            </returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Multiplies the <paramref name="left" /> matrix by the <paramref name="right" /> vector.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right vector.</param>
            <returns>
            The product of matrices.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Multiplies the <paramref name="left"/> matrix by the <paramref name="right"/> vector.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right vector.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            The product of matrices.
            </returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Transpose(xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Transposes the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Transpose(xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Determinant(xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Calculates a determinant of specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The determinant of matrix.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Determinant(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates a determinant of specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The determinant of matrix.</returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.LUPDecomposition(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters,System.Int32[]@,System.Int32@)">
            <summary>
            Decomposes a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <param name="permutation">An array of permutations.</param>
            <param name="toggle">Used for calculating a determinant.</param>
            <returns>Combined Lower and Upper matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Inverse(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Inverts a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>An inverse matrix.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException">
            <summary>
            Thrown in matrix building.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.Transpose">
            <summary>
            Represets the Transpose function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Transpose"/> class.
            </summary>
            <param name="argument">Matrix or vector.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
            <exception cref="T:System.NotSupportedException">Argument is not <see cref="T:xFunc.Maths.Expressions.Matrices.Matrix"/> or <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/>.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Transpose.Argument">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>
            The expression.
            </value>
            <exception cref="T:System.NotSupportedException">Argument is not <see cref="T:xFunc.Maths.Expressions.Matrices.Matrix"/> or <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/>.</exception>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Transpose.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.Vector">
            <summary>
            Represents a vector.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.#ctor(xFunc.Maths.Expressions.IExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/> class.
            </summary>
            <param name="size">The size of vector.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:xFunc.Maths.Expressions.IExpression"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The element of vector.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Product">
            <summary>
            Represents the "product" function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Product.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Product"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Product.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Product"/> class.
            </summary>
            <param name="body">The function that is executed on each iteration.</param>
            <param name="to">The final value (including).</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Product.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Product"/> class.
            </summary>
            <param name="body">The function that is executed on each iteration.</param>
            <param name="from">The initial value (including).</param>
            <param name="to">The final value (including).</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Product.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Product"/> class.
            </summary>
            <param name="body">The function that is executed on each iteration.</param>
            <param name="from">The initial value (including).</param>
            <param name="to">The final value (including).</param>
            <param name="inc">The increment.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Product.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Product"/> class.
            </summary>
            <param name="body">The function that is executed on each iteration.</param>
            <param name="from">The initial value (including).</param>
            <param name="to">The final value (including).</param>
            <param name="inc">The increment.</param>
            <param name="variable">The increment variable.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Product.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Product.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Product.Calculate">
            <summary>
            Calculates this mathemarical expression. Don't use this method if your expression has variables or functions.
            </summary>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Product.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Product.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Product.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Product.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Product.Body">
            <summary>
            Gets the function that is executed on each iteration.
            </summary>
            <value>
            The function that is executed on each iteration.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Product.From">
            <summary>
            Gets ghe initial value (including).
            </summary>
            <value>
            The initial value (including).
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Product.To">
            <summary>
            Gets the final value (including).
            </summary>
            <value>
            The final value (including).
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Product.Increment">
            <summary>
            Gets the increment.
            </summary>
            <value>
            The increment.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Product.Variable">
            <summary>
            Gets the increment variable.
            </summary>
            <value>
            The increment variable.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.AddAssign">
            <summary>
            Represents the "+=" operation.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.BinaryExpression">
            <summary>
            The base class for binary operations.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.BinaryExpression.parent">
            <summary>
            The parent expression of this expression.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.BinaryExpression.left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.BinaryExpression.right">
            <summary>
            The right (second) operand.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.BinaryExpression"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.BinaryExpression"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.GetHashCode(System.Int32,System.Int32)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.ToString(System.String)">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <param name="format">The format of result string.</param>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.Calculate">
            <summary>
            Calculates this mathemarical expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.BinaryExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.Left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.Right">
            <summary>
            The right (second) operand.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix. Default implementation returns <c>false</c>. Override it if this expression returns a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.AddAssign.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.AddAssign"/> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.AddAssign.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.AddAssign.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.AddAssign.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.AddAssign"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.AddAssign.Left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.And">
            <summary>
            Represents a conditional-AND operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.And.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.And"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.And.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.And.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.And.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.And"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.Bool">
            <summary>
            A static class for bool extentions.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.Programming.Bool.True">
            <summary>
            The true constant.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.Programming.Bool.False">
            <summary>
            The false constant.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Bool.AsBool(System.Object)">
            <summary>
            Convert an object (a number) to bool.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns a bool.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Bool.AsNumber(System.Boolean)">
            <summary>
            Convert a bool to number.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns a number.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.Dec">
            <summary>
            Represents the decrement operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Dec.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.Dec"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Dec.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Dec.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Dec.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.Inc"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.Dec.Argument">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.DivAssign">
            <summary>
            Represents the "/=" operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.DivAssign.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.AddAssign"/> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.DivAssign.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.DivAssign.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.DivAssign.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.DivAssign"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.DivAssign.Left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.Equal">
            <summary>
            Represents the equality operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Equal.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.Equal"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Equal.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Equal.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Equal.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.Equal"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.For">
            <summary>
            Represents the "for" loop.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.For.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.For"/> class.
            </summary>
            <param name="body">The body of loop.</param>
            <param name="init">The initializer section.</param>
            <param name="cond">The condition section.</param>
            <param name="iter">The itererator section.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.For.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.For"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.For.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.For.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.For.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Programming.For"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.For"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.Body">
            <summary>
            Gets the body of loop.
            </summary>
            <value>
            The body of loop.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.Initialization">
            <summary>
            Gets the initializer section.
            </summary>
            <value>
            The initializer section.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.Condition">
            <summary>
            Gets the condition section.
            </summary>
            <value>
            The condition section.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.Iteration">
            <summary>
            Gets the iterator section.
            </summary>
            <value>
            The iterator section.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.GreaterOrEqual">
            <summary>
            Represents the "greater or equal" operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterOrEqual.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.GreaterOrEqual"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterOrEqual.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterOrEqual.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterOrEqual.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.GreaterOrEqual"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.GreaterThan">
            <summary>
            Represents the "greater than" operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterThan.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.GreaterThan"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterThan.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterThan.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterThan.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.GreaterThan"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.If">
            <summary>
            Represents the "if-else" statement.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.If"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="then">The "then" statement.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.If"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="then">The "then" statement.</param>
            <param name="else">The "else" statement.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.If"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <exception cref="T:System.ArgumentNullException">If the "else" statement is null.</exception>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Programming.If"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.If"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.Condition">
            <summary>
            Gets the condition.
            </summary>
            <value>
            The condition.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.Then">
            <summary>
            Gets the "then" statement.
            </summary>
            <value>
            The then.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.Else">
            <summary>
            Gets the "else" statement.
            </summary>
            <value>
            The else.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.Inc">
            <summary>
            Represents the increment operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Inc.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.Inc"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Inc.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Inc.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Inc.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.Inc"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.Inc.Argument">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.LessOrEqual">
            <summary>
            Represents the "less than or equal" operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessOrEqual.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.LessOrEqual"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessOrEqual.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessOrEqual.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessOrEqual.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.LessOrEqual"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.LessThan">
            <summary>
            Represents the "less than" operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessThan.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.LessThan"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessThan.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessThan.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessThan.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.LessThan"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.MulAssign">
            <summary>
            Represents the "*=" operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.MulAssign.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.AddAssign"/> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.MulAssign.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.MulAssign.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.MulAssign.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.MulAssign"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.MulAssign.Left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.NotEqual">
            <summary>
            Represents the inequality operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.NotEqual.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.NotEqual"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.NotEqual.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.NotEqual.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.NotEqual.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.NotEqual"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.Or">
            <summary>
            Represents a conditional-OR operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Or.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.Or"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Or.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Or.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Or.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.Or"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.SubAssign">
            <summary>
            Represents the "-=" operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.SubAssign.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.AddAssign"/> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.SubAssign.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.SubAssign.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.SubAssign.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.SubAssign"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.SubAssign.Left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.While">
            <summary>
            Represents the "while" loop.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.While.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.While"/> class.
            </summary>
            <param name="body">The body of while loop.</param>
            <param name="condition">The condition of loop.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.While.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.While.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.While.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.While"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Round">
            <summary>
            Represents the "round" function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Round"/> class.
            </summary>
            <param name="argument">The expression that represents a double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Round"/> class.
            </summary>
            <param name="argument">The expression that represents a double-precision floating-point number to be rounded.</param>
            <param name="digits">The expression that represents the number of fractional digits in the return value.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Round"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException">args</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Round.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Round.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Round.Argument">
            <summary>
            The expression that represents a double-precision floating-point number to be rounded.
            </summary>
            <value>
            The expression that represents a double-precision floating-point number to be rounded.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Round.Digits">
            <summary>
            The expression that represents the number of fractional digits in the return value.
            </summary>
            <value>
            The expression that represents the number of fractional digits in the return value.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Simplify">
            <summary>
            Represents the Simplify operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Simplify"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.Calculate">
            <summary>
            Throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <returns>
            The exception.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            The exception.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Simplify.Parent">
            <summary>
            This property always returns <c>null</c>.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Simplify.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Simplify.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Simplify.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Simplify.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Simplify.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Sum">
            <summary>
            Represents the "sum" function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sum.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Sum"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sum.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Sum"/> class.
            </summary>
            <param name="body">The function that is executed on each iteration.</param>
            <param name="to">The final value (including).</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sum.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Sum"/> class.
            </summary>
            <param name="body">The function that is executed on each iteration.</param>
            <param name="from">The initial value (including).</param>
            <param name="to">The final value (including).</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sum.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Sum"/> class.
            </summary>
            <param name="body">The function that is executed on each iteration.</param>
            <param name="from">The initial value (including).</param>
            <param name="to">The final value (including).</param>
            <param name="inc">The increment.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sum.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Sum"/> class.
            </summary>
            <param name="body">The function that is executed on each iteration.</param>
            <param name="from">The initial value (including).</param>
            <param name="to">The final value (including).</param>
            <param name="inc">The increment.</param>
            <param name="variable">The increment variable.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sum.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sum.Calculate">
            <summary>
            Calculates this mathemarical expression. Don't use this method if your expression has variables or functions.
            </summary>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sum.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sum.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sum.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sum.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sum.Body">
            <summary>
            Gets the function that is executed on each iteration.
            </summary>
            <value>
            The function that is executed on each iteration.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sum.From">
            <summary>
            Gets ghe initial value (including).
            </summary>
            <value>
            The initial value (including).
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sum.To">
            <summary>
            Gets the final value (including).
            </summary>
            <value>
            The final value (including).
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sum.Increment">
            <summary>
            Gets the increment.
            </summary>
            <value>
            The increment.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sum.Variable">
            <summary>
            Gets the increment variable.
            </summary>
            <value>
            The increment variable.
            </value>
        </member>
        <member name="T:xFunc.Maths.IDifferentiator">
            <summary>
            The interface for differentiator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.IDifferentiator.Differentiate(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.IDifferentiator.Differentiate(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.IDifferentiator.Differentiate(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            Returns the derivative.
            </returns>
        </member>
        <member name="T:xFunc.Maths.IExpressionFactory">
            <summary>
            Factory of expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.IExpressionFactory.Create(xFunc.Maths.Tokens.IToken)">
            <summary>
            Creates a expression from specified token.
            </summary>
            <param name="token">The token.</param>
            <returns>The expression.</returns>
        </member>
        <member name="T:xFunc.Maths.InvalidResultException">
            <summary>
            Throws when a result is invalid.
            </summary>
        </member>
        <member name="M:xFunc.Maths.InvalidResultException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.InvalidResultException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.InvalidResultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.InvalidResultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.InvalidResultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.InvalidResultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:xFunc.Maths.InvalidResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.InvalidResultException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:xFunc.Maths.ISimplifier">
            <summary>
            The interface for mathematical expression simplifier.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ISimplifier.Simplify(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Simplifies the <paramref name="expression"/>.
            </summary>
            <param name="expression">A expression to simplify.</param>
            <returns>A simplified expression.</returns>
        </member>
        <member name="T:xFunc.Maths.Differentiator">
            <summary>
            The differentiator of expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Differentiator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Differentiator"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Differentiator.#ctor(xFunc.Maths.ISimplifier)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Differentiator"/> class.
            </summary>
            <param name="simplifier">The simplifier.</param>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Differentiate(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Differentiate(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Differentiate(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            Returns the derivative.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> or <paramref name="variable"/> is null.</exception>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Number(xFunc.Maths.Expressions.Number,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Variable(xFunc.Maths.Expressions.Variable,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Abs(xFunc.Maths.Expressions.Abs,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Add(xFunc.Maths.Expressions.Add,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Div(xFunc.Maths.Expressions.Div,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Exp(xFunc.Maths.Expressions.Exp,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Ln(xFunc.Maths.Expressions.Ln,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Lg(xFunc.Maths.Expressions.Lg,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Log(xFunc.Maths.Expressions.Log,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Mul(xFunc.Maths.Expressions.Mul,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Pow(xFunc.Maths.Expressions.Pow,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Root(xFunc.Maths.Expressions.Root,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Sqrt(xFunc.Maths.Expressions.Sqrt,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Sub(xFunc.Maths.Expressions.Sub,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.UnaryMinus(xFunc.Maths.Expressions.UnaryMinus,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arccos(xFunc.Maths.Expressions.Trigonometric.Arccos,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arccot(xFunc.Maths.Expressions.Trigonometric.Arccot,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arccsc(xFunc.Maths.Expressions.Trigonometric.Arccsc,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arcsec(xFunc.Maths.Expressions.Trigonometric.Arcsec,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arcsin(xFunc.Maths.Expressions.Trigonometric.Arcsin,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arctan(xFunc.Maths.Expressions.Trigonometric.Arctan,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Cos(xFunc.Maths.Expressions.Trigonometric.Cos,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Cot(xFunc.Maths.Expressions.Trigonometric.Cot,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Csc(xFunc.Maths.Expressions.Trigonometric.Csc,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Sec(xFunc.Maths.Expressions.Trigonometric.Sec,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Sin(xFunc.Maths.Expressions.Trigonometric.Sin,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Tan(xFunc.Maths.Expressions.Trigonometric.Tan,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arcosh(xFunc.Maths.Expressions.Hyperbolic.Arcosh,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arcoth(xFunc.Maths.Expressions.Hyperbolic.Arcoth,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arcsch(xFunc.Maths.Expressions.Hyperbolic.Arcsch,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arsech(xFunc.Maths.Expressions.Hyperbolic.Arsech,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Arsinh(xFunc.Maths.Expressions.Hyperbolic.Arsinh,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Artanh(xFunc.Maths.Expressions.Hyperbolic.Artanh,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Cosh(xFunc.Maths.Expressions.Hyperbolic.Cosh,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Coth(xFunc.Maths.Expressions.Hyperbolic.Coth,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Csch(xFunc.Maths.Expressions.Hyperbolic.Csch,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Sech(xFunc.Maths.Expressions.Hyperbolic.Sech,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Sinh(xFunc.Maths.Expressions.Hyperbolic.Sinh,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.Tanh(xFunc.Maths.Expressions.Hyperbolic.Tanh,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Differentiator.UserFunction(xFunc.Maths.Expressions.UserFunction,xFunc.Maths.Expressions.Variable,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Differentiates the user function.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <param name="parameters">The parameters.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="P:xFunc.Maths.Differentiator.Simplifier">
            <summary>
            Gets or sets the simplifier.
            </summary>
            <value>The simplifier.</value>
        </member>
        <member name="P:xFunc.Maths.Differentiator.Simplify">
            <summary>
            Enable/disable simplification.
            </summary>
            <value>
              <c>true</c> if simplify; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.ExpressionFactory">
            <summary>
            Factory of mathematic expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ExpressionFactory.Create(xFunc.Maths.Tokens.IToken)">
            <summary>
            Creates a expression from specified token.
            </summary>
            <param name="token">The token.</param>
            <returns>
            The expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.ExpressionFactory.CreateOperation(xFunc.Maths.Tokens.OperationToken)">
            <summary>
            Creates an expression object from <see cref="T:xFunc.Maths.Tokens.OperationToken"/>.
            </summary>
            <param name="token">The operation token.</param>
            <returns>An expression.</returns>
        </member>
        <member name="M:xFunc.Maths.ExpressionFactory.CreateFunction(xFunc.Maths.Tokens.FunctionToken)">
            <summary>
            Creates an expression object from <see cref="T:xFunc.Maths.Tokens.FunctionToken"/>.
            </summary>
            <param name="token">The function token.</param>
            <returns>An expression.</returns>
        </member>
        <member name="M:xFunc.Maths.ExpressionFactory.CreateUserFunction(xFunc.Maths.Tokens.UserFunctionToken)">
            <summary>
            Creates an expression object from <see cref="T:xFunc.Maths.Tokens.UserFunctionToken"/>.
            </summary>
            <param name="token">The user-function token.</param>
            <returns>An expression.</returns>
        </member>
        <member name="T:xFunc.Maths.LexerException">
            <summary>
            The exception that is thrown in <see cref="T:xFunc.Maths.Lexer"/>.
            </summary>
        </member>
        <member name="M:xFunc.Maths.LexerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.LexerException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.LexerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.LexerException"/> class with a specified error message.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.LexerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.LexerException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:xFunc.Maths.LexerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.LexerException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:xFunc.Maths.ParserException">
            <summary>
            The exception that is thrown in <see cref="T:xFunc.Maths.Parser"/>.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ParserException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.ParserException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ParserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.ParserException"/> class with a specified error message.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.ParserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.ParserException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:xFunc.Maths.ParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.ParserException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:xFunc.Maths.Expressions.Abs">
            <summary>
            Represents the Absolute operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Abs.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Abs"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Abs.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Abs.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Abs.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this Absolute expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Abs.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Bitwise.And"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Add">
            <summary>
            Represents an Addition operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Add"/> class.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Add"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Add.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.AngleMeasurement">
            <summary>
            Specifies a measurement of angle.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.AngleMeasurement.Degree">
            <summary>
            Degree.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.AngleMeasurement.Radian">
            <summary>
            Radian.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.AngleMeasurement.Gradian">
            <summary>
            Gradian.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Bitwise.And">
            <summary>
            Represents a bitwise AND operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.And.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Bitwise.And"/> class.
            </summary>
            <param name="firstMathExpression">The left operand.</param>
            <param name="secondMathExpression">The right operand.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.And.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.And.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.And.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this bitwise AND expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.And.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Bitwise.And"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Bitwise.XOr">
            <summary>
            Represents a bitwise XOR operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.XOr.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Bitwise.XOr"/> class.
            </summary>
            <param name="firstMathExpression">The left operand.</param>
            <param name="secondMathExpression">The right operand.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.XOr.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.XOr.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.XOr.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this bitwise XOR expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.XOr.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Bitwise.XOr"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Bitwise.Or">
            <summary>
            Represents a bitwise OR operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.Or.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Bitwise.Or"/> class.
            </summary>
            <param name="firstMathExpression">The left operand.</param>
            <param name="secondMathExpression">The right operand.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.Or.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.Or.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.Or.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this bitwise OR expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.Or.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Bitwise.Or"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Bitwise.Not">
            <summary>
            Represents a bitwise NOT operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.Not.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Bitwise.Not"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.Not.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.Not.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.Not.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this bitwise NOT expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Bitwise.Not.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Bitwise.Not"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arccos">
            <summary>
            Represents the Arccosine function.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression">
            <summary>
            The base class for trigonomeric functions. This is an <c>abstract</c> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arccos"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arccot">
            <summary>
            Represents the Arcotangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arccot"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arccsc">
            <summary>
            Represents the Arccosecant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arccsc"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arcsec">
            <summary>
            Represents the Arcsecant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arcsec"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arcsin">
            <summary>
            Represents teh Arcsine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arcsin"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arctan">
            <summary>
            Represents the Arctangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arctan"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Define">
            <summary>
            Represents the Define operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Define"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.Calculate">
            <summary>
            Throws <see cref="T:System.NotSupportedException"/>
            </summary>
            <returns>
            The exception.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            The exception.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is null.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Define"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
            <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not a <see cref="T:xFunc.Maths.Expressions.Variable"/> or a <see cref="T:xFunc.Maths.Expressions.UserFunction"/>.</exception>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Arcsch">
            <summary>
            Represents the Arcsch function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Arcsch"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Arsech">
            <summary>
            Represents the Arsech function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Arsech"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Arcoth">
            <summary>
            Represents the Arcoth function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Arcoth"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Artanh">
            <summary>
            Represents the Artanh function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Artanh"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Arcosh">
            <summary>
            Represents the Arcosh function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Arcosh"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Arsinh">
            <summary>
            Represents the Arsinh function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Arsinh"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Csch">
            <summary>
            Represents the Hyperbolic cosecant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Csch"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Csc">
            <summary>
            Represents the Cosecant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Csc"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Cos">
            <summary>
            Represents the Cosine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Cos"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Cot">
            <summary>
            Represents the Cotangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Cot"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Derivative">
            <summary>
            Represents the Deriv function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Derivative"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Derivative"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.Variable">
            <summary>
            Gets or sets the variable.
            </summary>
            <value>
            The variable.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Div">
            <summary>
            Represents the Division operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Div"/> class.
            </summary>
            <param name="firstOperand">The first (left) operand.</param>
            <param name="secondOperand">The second (right) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Exp">
            <summary>
            Represents the Exponential function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Exp"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Pow">
            <summary>
            Represents the Exponentiation operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Pow"/> class.
            </summary>
            <param name="firstOperand">The base.</param>
            <param name="secondOperand">The exponent.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A specified number raised to the specified power.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Pow"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Cosh">
            <summary>
            Represents the Hyperbolic cosine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Cosh"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Coth">
            <summary>
            Represents the Hyperbolic cotangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Coth"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Sech">
            <summary>
            Represents the Hyperbolic secant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Sech"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Sinh">
            <summary>
            Represents the Hyperbolic sine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Sinh"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Tanh">
            <summary>
            Represents the Hyperbolic tangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Tanh"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Lg">
            <summary>
            Represents the Common logarithm function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Lg"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this Lg expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Lg"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Ln">
            <summary>
            Represents the Natural logarithm function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Ln"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this Ln expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Ln"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Log">
            <summary>
            Represents the Logarithm function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Log"/> class.
            </summary>
            <param name="arg">The left operand.</param>
            <param name="base">The right operand.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this Log expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Log"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Mul">
            <summary>
            Represents the Multiplication operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Mul"/> class.
            </summary>
            <param name="left">The first (left) operand.</param>
            <param name="right">The second (right) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Mul.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Number">
            <summary>
            Represents the Number operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Number"/> class.
            </summary>
            <param name="number">A number.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.op_Implicit(xFunc.Maths.Expressions.Number)~System.Double">
            <summary>
            Defines an implicit conversion of a <see cref="T:xFunc.Maths.Expressions.Number"/> to a double value.
            </summary>
            <param name="number">The value to convert to a double.</param>
            <returns>An object that contains the value of the <paramref name="number"/> parameter.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.op_Implicit(System.Double)~xFunc.Maths.Expressions.Number">
            <summary>
            Defines an implicit conversion of double to <see cref="T:xFunc.Maths.Expressions.Number"/>.
            </summary>
            <param name="number">The value to convert to <see cref="T:xFunc.Maths.Expressions.Number"/>.</param>
            <returns>An object that contains the value of the <paramref name="number"/> parameter.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.Calculate">
            <summary>
            Returns a number. Don't use this method if your expression has variables.
            </summary>
            <returns>A result of the calculation.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Returns a number.
            </summary>
            <param name="parameters">A collection of variables.</param>
            <returns>A result of the calculation.</returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Number"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.Value">
            <summary>
            Gets or Sets a number.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters. 
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Root">
            <summary>
            Represents the nth root operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Root.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Root"/> class.
            </summary>
            <param name="firstMathExpression">The first operand.</param>
            <param name="secondMathExpression">The second operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Root.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Root.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Root.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Root.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Sec">
            <summary>
            Represents the Secant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Sec"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Sin">
            <summary>
            Represents the Sine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Sin"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Sqrt">
            <summary>
            Represents the Square Root function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Sqrt"/> class.
            </summary>
            <param name="firstMathExpression">The argument of the function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Sqrt"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Sub">
            <summary>
            Represents the Subtraction operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Sub"/> class.
            </summary>
            <param name="left">The minuend.</param>
            <param name="right">The subtrahend.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Sub"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sub.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Tan">
            <summary>
            Represents the Tangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Tan"/> class.
            </summary>
            <param name="firstMathExpression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.CalculateDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.CalculateRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.CalculateGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.UnaryMinus">
            <summary>
            Represents the unary minus.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UnaryMinus"/> class.
            </summary>
            <param name="firstMathExpression">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Undefine">
            <summary>
            Represents the Undefice operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Undefine"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.Calculate">
            <summary>
            Calculates this mathemarical expression. Don't use this method if your expression has variables or functions.
            </summary>
            <returns>
            A result of the calculation.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathemarical expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is null.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
            <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not a <see cref="T:xFunc.Maths.Expressions.Variable"/> or a <see cref="T:xFunc.Maths.Expressions.UserFunction"/>.</exception>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.UserFunction">
            <summary>
            Represents user-defined functions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UserFunction"/> class.
            </summary>
            <param name="function">The name of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UserFunction"/> class.
            </summary>
            <param name="function">The name of function.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.#ctor(System.String,xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UserFunction"/> class.
            </summary>
            <param name="function">The name of function.</param>
            <param name="args">Arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.ToString">
            <summary>
            Converts this expression to the equivalent string.
            </summary>
            <returns>The string that represents this expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Always throws an exception.
            </summary>
            <returns>
            A result of the calculation.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.UserFunction.Function">
            <summary>
            Gets the name of function.
            </summary>
            <value>The name of function.</value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UserFunction.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UserFunction.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Variable">
            <summary>
            Represents variables in expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Variable"/> class.
            </summary>
            <param name="name">A name of variable.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.op_Implicit(xFunc.Maths.Expressions.Variable)~System.String">
            <summary>
            Defines an implicit conversion of a Variable object to a string object.
            </summary>
            <param name="variable">The value to convert.</param>
            <returns>An object that contains the converted value.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.op_Implicit(System.String)~xFunc.Maths.Expressions.Variable">
            <summary>
            Defines an implicit conversion of a string object to a Variable object.
            </summary>
            <param name="variable">The value to convert.</param>
            <returns>An object that contains the converted value.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.GetHashCode">
            <summary>
            Returns a hash function for this type.
            </summary>
            <returns>A hash code for the current <see cref="T:xFunc.Maths.Expressions.Variable"/>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.Calculate">
            <summary>
            Do not use this method. It always throws an exception.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.Calculate(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Gets value of this variable from <paramref name="parameters"/>.
            </summary>
            <param name="parameters">Collection of variables.</param>
            <returns>A value of this variable.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Variable"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Variable"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.Name">
            <summary>
            A name of this variable.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.MinCountOfParams">
            <summary>
            Gets the minimum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.MaxCountOfParams">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.ResultIsMatrix">
            <summary>
            Gets a value indicating whether result is a matrix.
            </summary>
            <value>
              <c>true</c> if result is a matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.ILexer">
            <summary>
            The interface for mathematical lexer.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ILexer.Tokenize(System.String)">
            <summary>
            Converts the string into a sequence of tokens.
            </summary>
            <param name="function">The string that contains the functions and operators.</param>
            <returns>The sequence of tokens.</returns>
        </member>
        <member name="T:xFunc.Maths.MathExtentions">
            <summary>
            Provides static methods for additional functions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Pow(System.Double,System.Double)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="number">A double-precision floating-point number to be raised to a power.</param>
            <param name="power">A double-precision floating-point number that specifies a power.</param>
            <returns>The <paramref name="number"/> raised to the <paramref name="power"/>.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Cot(System.Double)">
            <summary>
            Returns the cotangent of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The cotangent of d.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Coth(System.Double)">
            <summary>
            Returns the hyperbolic cotangent of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The hyperbolic cotangent of value.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Sec(System.Double)">
            <summary>
            Returns the secant of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The secant of d.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Sech(System.Double)">
            <summary>
            Returns the hyperbolic secant of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The hyperbolic secant of value.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Csc(System.Double)">
            <summary>
            Returns the cosecant of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The cosecant of d.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Csch(System.Double)">
            <summary>
            Returns the hyperbolic cosecant of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The hyperbolic cosecant of value.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Asinh(System.Double)">
            <summary>
            Returns the angle whose hyperbolic sine is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic sine.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Acosh(System.Double)">
            <summary>
            Returns the angle whose hyperbolic cosine is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic cosine.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Atanh(System.Double)">
            <summary>
            Returns the angle whose hyperbolic tangent is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic tangent.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Acot(System.Double)">
            <summary>
            Returns the angle whose cotangent is the specified number.
            </summary>
            <param name="d">A number representing a cotangent.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Acoth(System.Double)">
            <summary>
            Returns the angle whose hyperbolic cotangent is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic cotangent.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Asec(System.Double)">
            <summary>
            Returns the angle whose secant is the specified number.
            </summary>
            <param name="d">A number representing a secant.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Asech(System.Double)">
            <summary>
            Returns the angle whose hyperbolic secant is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic secant.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Acsc(System.Double)">
            <summary>
            Returns the angle whose cosecant is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic cosecant.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Acsch(System.Double)">
            <summary>
            Returns the angle whose hyperbolic cosecant is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic cosecant.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.GCD(System.Double,System.Double)">
            <summary>
            Computes the greatest common divisor.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>The greatest common divisor.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.GCD(System.Double[])">
            <summary>
            Computes the polynomial greatest common divisor.
            </summary>
            <param name="numbers">The numbers.</param>
            <returns>The greatest common divisor.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="numbers"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.LCM(System.Double,System.Double)">
            <summary>
            Computes the least common multiple.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>The least common multiple.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.LCM(System.Double[])">
            <summary>
            Computes the polynomial least common multiple.
            </summary>
            <param name="numbers">The numbers.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="numbers"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.ToNewBase(System.Int32,xFunc.Maths.NumeralSystem)">
            <summary>
            Converts <paramref name="number"/> to the new numeral system.
            </summary>
            <param name="number">The number.</param>
            <param name="numeralSystem">The numeral system.</param>
            <returns>String that contains the number in the new numeral system.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtentions.Fact(System.Double)">
            <summary>
            Computes the factorial.
            </summary>
            <param name="n">An argument.</param>
            <returns></returns>
        </member>
        <member name="T:xFunc.Maths.Lexer">
            <summary>
            The lexer for mathematical expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Lexer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:xFunc.Maths.Lexer"/>.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Lexer.Tokenize(System.String)">
            <summary>
            Converts the string into a sequence of tokens.
            </summary>
            <param name="function">The string that contains the functions and operators.</param>
            <returns>The sequence of tokens.</returns>
            <seealso cref="T:xFunc.Maths.Tokens.IToken"/>
            <exception cref="T:System.ArgumentNullException">Throws when the <paramref name="function"/> parameter is null or empty.</exception>
            <exception cref="T:xFunc.Maths.LexerException">Throws when <paramref name="function"/> has the not supported symbol.</exception>
        </member>
        <member name="T:xFunc.Maths.Parser">
            <summary>
            The parser for mathematical expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Parser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Parser"/> class with default implementations of <see cref="T:xFunc.Maths.ILexer"/>, <see cref="T:xFunc.Maths.ISimplifier"/> and <see cref="T:xFunc.Maths.IExpressionFactory"/>.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Parser.#ctor(xFunc.Maths.ILexer,xFunc.Maths.ISimplifier,xFunc.Maths.IExpressionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Parser"/> class.
            </summary>
            <param name="lexer">The lexer.</param>
            <param name="simplifier">The simplifier.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:xFunc.Maths.Parser.HasVar(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable)">
            <summary>
            Checks the <paramref name="expression"/> parameter has <paramref name="arg"/>.
            </summary>
            <param name="expression">A expression that is checked.</param>
            <param name="arg">A variable that can be contained in the expression.</param>
            <returns>true if <paramref name="expression"/> has <paramref name="arg"/>; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Parser.Parse(System.String)">
            <summary>
            Parses the specified function.
            </summary>
            <param name="function">The function.</param>
            <returns>The parsed expression.</returns>
        </member>
        <member name="P:xFunc.Maths.Parser.Lexer">
            <summary>
            Gets or Sets a implementation of <see cref="T:xFunc.Maths.ILexer"/>.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Parser.Simplifier">
            <summary>
            Gets or Sets a implementation of <see cref="T:xFunc.Maths.ISimplifier"/>.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Parser.SaveLastExpression">
            <summary>
            Gets or sets a value indicating whether saving of last expression.
            </summary>
            <value>
              If <c>true</c> the parser saves last expression.
            </value>
        </member>
        <member name="T:xFunc.Maths.Processor">
            <summary>
            The main point of this library. Bring together all features.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Processor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Processor"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Processor.#ctor(xFunc.Maths.ILexer,xFunc.Maths.ISimplifier,xFunc.Maths.IDifferentiator)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Processor"/> class.
            </summary>
            <param name="lexer">The lexer.</param>
            <param name="simplifier">The simplifier.</param>
            <param name="differentiator">The differentiator.</param>
        </member>
        <member name="M:xFunc.Maths.Processor.#ctor(xFunc.Maths.ILexer,xFunc.Maths.ISimplifier,xFunc.Maths.IDifferentiator,xFunc.Maths.IExpressionFactory,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Processor"/> class.
            </summary>
            <param name="lexer">The lexer.</param>
            <param name="simplifier">The simplifier.</param>
            <param name="differentiator">The differentiator.</param>
            <param name="factory">The expression factory.</param>
            <param name="parameters">The collection of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Processor.Solve(System.String)">
            <summary>
            Solves the specified expression.
            </summary>
            <param name="function">The function.</param>
            <returns>The result of solving.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Solve``1(System.String)">
            <summary>
            Solves the specified function.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <returns>The result of solving.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Simplify(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Simplifies the <paramref name="expression"/>.
            </summary>
            <param name="expression">A expression to simplify.</param>
            <returns>A simplified expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Differentiate(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Differentiate(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Differentiate(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            Returns the derivative.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Parse(System.String)">
            <summary>
            Parses the specified function.
            </summary>
            <param name="function">The function.</param>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Parse(System.String,System.Boolean)">
            <summary>
            Parses the specified function.
            </summary>
            <param name="function">The function.</param>
            <param name="simplify">if set to <c>true</c>, simplifies the expression.</param>
            <returns>The parsed expression.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is null.</exception>
            <exception cref="T:xFunc.Maths.ParserException">Error while parsing.</exception>
        </member>
        <member name="P:xFunc.Maths.Processor.AngleMeasurement">
            <summary>
            Gets or Sets a measurement of angles.
            </summary>
            <seealso cref="P:xFunc.Maths.Processor.AngleMeasurement"/>
        </member>
        <member name="P:xFunc.Maths.Processor.Base">
            <summary>
            Gets or sets the numeral system.
            </summary>
            <value>
            The numeral system.
            </value>
        </member>
        <member name="P:xFunc.Maths.Processor.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Processor.UserFunctions">
            <summary>
            Gets the functions.
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="T:xFunc.Maths.Simplifier">
            <summary>
            The default implementation of <see cref="T:xFunc.Maths.ISimplifier"/>/
            </summary>
        </member>
        <member name="M:xFunc.Maths.Simplifier.Simplify(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Simplifies the <paramref name="expression"/>.
            </summary>
            <param name="expression">A expression to simplify.</param>
            <returns>A simplified expression.</returns>
        </member>
        <member name="T:xFunc.Maths.NumeralSystem">
            <summary>
            Numeral systems.
            </summary>
        </member>
        <member name="F:xFunc.Maths.NumeralSystem.Binary">
            <summary>
            The binary numeral system.
            </summary>
        </member>
        <member name="F:xFunc.Maths.NumeralSystem.Octal">
            <summary>
            The octal numeral system.
            </summary>
        </member>
        <member name="F:xFunc.Maths.NumeralSystem.Decimal">
            <summary>
            The decimal numeral system.
            </summary>
        </member>
        <member name="F:xFunc.Maths.NumeralSystem.Hexidecimal">
            <summary>
            The hexidecimal numeral system.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Resources.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.AssignFunction">
            <summary>
              Looks up a localized string similar to The expression &apos;{1}&apos; was assigned to the function &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.AssignVariable">
            <summary>
              Looks up a localized string similar to The value &apos;{1}&apos; was assigned to the variable &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.ConstError">
            <summary>
              Looks up a localized string similar to You can&apos;t add constants..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.ErrorWhileParsingTree">
            <summary>
              Looks up a localized string similar to An error occurred while parsing the tree..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.FunctionNotFoundExceptionError">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; function not found..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.InvalidExpression">
            <summary>
              Looks up a localized string similar to The expression is invalid..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.InvalidInFirst">
            <summary>
              Looks up a localized string similar to No item satisfied the predicate or the source collection was empty..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.InvalidNumberOfVariables">
            <summary>
              Looks up a localized string similar to The function has an invalid number of variables..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.LessParams">
            <summary>
              Looks up a localized string similar to The number of parameters is less than expected..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.MatrixArgException">
            <summary>
              Looks up a localized string similar to The size of matrices is invalid..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.MoreParams">
            <summary>
              Looks up a localized string similar to The number of parameters is more than expected..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.NotBalanced">
            <summary>
              Looks up a localized string similar to Brackets are not balanced..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.NotSpecifiedFunction">
            <summary>
              Looks up a localized string similar to The function is not specified..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.NotSupportedSymbol">
            <summary>
              Looks up a localized string similar to The symbol &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.NotSupportedToken">
            <summary>
              Looks up a localized string similar to The type of token is not supported..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.ReadOnlyError">
            <summary>
              Looks up a localized string similar to You cannot change value of &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.UndefineFunction">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; function is removed..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.UndefineVariable">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; variable is removed..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.UnexpectedError">
            <summary>
              Looks up a localized string similar to Unexpected error..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.VariableNotFoundExceptionError">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; variable not found..
            </summary>
        </member>
        <member name="T:xFunc.Maths.Results.IResult">
            <summary>
            Represents the result of calculation.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Results.IResult.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:xFunc.Maths.Results.ExpressionResult">
            <summary>
            Represents the result in the expression form.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Results.ExpressionResult.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Results.ExpressionResult"/> class.
            </summary>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Results.ExpressionResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Results.ExpressionResult.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:xFunc.Maths.Results.NumberResult">
            <summary>
            Represents the numerical result.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Results.NumberResult.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Results.NumberResult"/> class.
            </summary>
            <param name="number">The numerical representation of result.</param>
        </member>
        <member name="M:xFunc.Maths.Results.NumberResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Results.NumberResult.Result">
            <summary>
            Gets the numerical representation of result.
            </summary>
            <value>
            The numerical representation of result.
            </value>
        </member>
        <member name="T:xFunc.Maths.Results.StringResult">
            <summary>
            Represents the string result
            </summary>
        </member>
        <member name="M:xFunc.Maths.Results.StringResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Results.StringResult"/> class.
            </summary>
            <param name="str">The string representation of result.</param>
        </member>
        <member name="M:xFunc.Maths.Results.StringResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Results.StringResult.Result">
            <summary>
            Gets the string representation of result.
            </summary>
            <value>
            The string representation of result.
            </value>
        </member>
        <member name="T:xFunc.Maths.Tokens.Functions">
            <summary>
            Specifies functions.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Absolute">
            <summary>
            abs
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Sine">
            <summary>
            sin
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cosine">
            <summary>
            cos
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Tangent">
            <summary>
            tg
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cotangent">
            <summary>
            Cot
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Secant">
            <summary>
            sec
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cosecant">
            <summary>
            csc
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arcsine">
            <summary>
            Arcsin
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arccosine">
            <summary>
            Arccos
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arctangent">
            <summary>
            Arctan
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arccotangent">
            <summary>
            Arccot
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arcsecant">
            <summary>
            arcsec
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arccosecant">
            <summary>
            arccsc
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Sqrt">
            <summary>
            sqrt
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Root">
            <summary>
            root
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Ln">
            <summary>
            Ln
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Lg">
            <summary>
            Lg
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Log">
            <summary>
            Log
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Sineh">
            <summary>
            sinh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cosineh">
            <summary>
            cosh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Tangenth">
            <summary>
            tanh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cotangenth">
            <summary>
            coth
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Secanth">
            <summary>
            sech
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cosecanth">
            <summary>
            csch
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arsineh">
            <summary>
            arsinh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arcosineh">
            <summary>
            arcosh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Artangenth">
            <summary>
            artanh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arcotangenth">
            <summary>
            arcoth
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arsecanth">
            <summary>
            arsech
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arcosecanth">
            <summary>
            arcsch
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Exp">
            <summary>
            Exponential
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.GCD">
            <summary>
            Greatest common divisor
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.LCM">
            <summary>
            Least common multiple
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Factorial">
            <summary>
            fact
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Sum">
            <summary>
            Summation
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Product">
            <summary>
            Product
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Round">
            <summary>
            round
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Floor">
            <summary>
            floor
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Ceil">
            <summary>
            ceil
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.If">
            <summary>
            if
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.For">
            <summary>
            for
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.While">
            <summary>
            while
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Derivative">
            <summary>
            deriv
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Simplify">
            <summary>
            simplify
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Define">
            <summary>
            def
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Undefine">
            <summary>
            undef
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Transpose">
            <summary>
            transpose
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Determinant">
            <summary>
            determinant, det
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Inverse">
            <summary>
            inverse
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Vector">
            <summary>
            vector
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Matrix">
            <summary>
            matrix
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.UserFunction">
            <summary>
            The user function
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.FunctionToken">
            <summary>
            Represents a function token.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.IToken">
            <summary>
            Represents a token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.IToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.FunctionToken.m_countOfParams">
            <summary>
            The count of parameters
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.FunctionToken.#ctor(xFunc.Maths.Tokens.Functions)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.FunctionToken"/> class.
            </summary>
            <param name="function">A function.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.FunctionToken.#ctor(xFunc.Maths.Tokens.Functions,System.Int32)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.FunctionToken"/> class.
            </summary>
            <param name="function">A function.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.FunctionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.FunctionToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.FunctionToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.FunctionToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.FunctionToken.Function">
            <summary>
            Gets the function.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.FunctionToken.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Tokens.NumberToken">
            <summary>
            Represents a number token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.NumberToken.#ctor(System.Double)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.NumberToken"/> class.
            </summary>
            <param name="number">A number.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.NumberToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.NumberToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.NumberToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.NumberToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.NumberToken.Number">
            <summary>
            Gets the number.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.Operations">
            <summary>
            Specifies operations.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Addition">
            <summary>
            +
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Subtraction">
            <summary>
            -
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Multiplication">
            <summary>
            *
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Division">
            <summary>
            /
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Exponentiation">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.UnaryMinus">
            <summary>
            - (Unary)
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Factorial">
            <summary>
            !
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.ConditionalAnd">
            <summary>
            &amp;&amp;
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.ConditionalOr">
            <summary>
            ||
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Equal">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.NotEqual">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.LessThan">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.LessOrEqual">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.GreaterThan">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.GreaterOrEqual">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Increment">
            <summary>
            The increment (++)
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Decrement">
            <summary>
            The decrement (--)
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.AddAssign">
            <summary>
            +=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.SubAssign">
            <summary>
            -=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.MulAssign">
            <summary>
            *=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.DivAssign">
            <summary>
            /=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Assign">
            <summary>
            :=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.BitwiseNot">
            <summary>
            ~, not
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.BitwiseAnd">
            <summary>
            &amp;, and
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.BitwiseOr">
            <summary>
            |, or
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.BitwiseXOr">
            <summary>
            xor
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.OperationToken">
            <summary>
            Represents a operation token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.OperationToken.#ctor(xFunc.Maths.Tokens.Operations)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.OperationToken"/> class.
            </summary>
            <param name="operation">A operation.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.OperationToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.OperationToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.OperationToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.OperationToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.OperationToken.Operation">
            <summary>
            Gets the operation.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.Symbols">
            <summary>
            Describes special symbols. 
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Symbols.OpenBracket">
            <summary>
            (
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Symbols.CloseBracket">
            <summary>
            )
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Symbols.OpenBrace">
            <summary>
            {
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Symbols.CloseBrace">
            <summary>
            }
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Symbols.Comma">
            <summary>
            ,
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.SymbolToken">
            <summary>
            Represents a symbol token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.SymbolToken.#ctor(xFunc.Maths.Tokens.Symbols)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.SymbolToken"/> class.
            </summary>
            <param name="symbol">A symbol.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.SymbolToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.SymbolToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.SymbolToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.SymbolToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.SymbolToken.Symbol">
            <summary>
            Gets the symbol.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.UserFunctionToken">
            <summary>
            Represents a user-function token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.UserFunctionToken.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.UserFunctionToken"/> class.
            </summary>
            <param name="functionName">A name of function.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.UserFunctionToken.#ctor(System.String,System.Int32)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.UserFunctionToken"/> class.
            </summary>
            <param name="functionName">A name of function.</param>
            <param name="countOfParams">A count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.UserFunctionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.UserFunctionToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.UserFunctionToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.UserFunctionToken.FunctionName">
            <summary>
            Gets the name of function.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.VariableToken">
            <summary>
            Represents a variable token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.VariableToken.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.VariableToken"/> class.
            </summary>
            <param name="variable">A name of variable.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.VariableToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.VariableToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.VariableToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.VariableToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.VariableToken.Variable">
            <summary>
            Gets a name of variable.
            </summary>
        </member>
    </members>
</doc>
